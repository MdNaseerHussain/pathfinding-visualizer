{"version":3,"sources":["Board.js","Node.js","Dijkstra.js","BestFirstSearch.js","Astar.js","Grid.js","Header.js","Foot.js","App.js","index.js"],"names":["board","i","ROW","j","push","row","col","isWall","ROW_SIZE","COLUMN_SIZE","isStart","isEnd","isExplored","isVisible","isPath","Node","el","className","isVisited","onClick","handleNodeClick","onMouseDown","setBool","onMouseEnter","bool","onMouseUp","dijkstra","markVisited","markExplored","markPath","start","end","dx","dy","dist","prev","distRow","prevRow","Infinity","queue","length","sz","curr","shift","setTimeout","temp","next","BestFirstSearch","distance","x1","y1","x2","y2","Math","abs","dis","index","Astar","xxdist","xrow","st","c","Grid","useState","boardState","setBoardState","test","setTest","visualizeBool","setVisualizeBool","resetBool","setResetBool","random","style","display","map","resetBoard","Header","Year","Date","getFullYear","Foot","id","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bbcf2bc.chunk.js","sourcesContent":["const board = [];\r\nconst ROW_SIZE = 15;\r\nconst COLUMN_SIZE = 50;\r\n\r\nfor (let i = 0; i < ROW_SIZE; i++) {\r\n  const ROW = [];\r\n  for (let j = 0; j < COLUMN_SIZE; j++) {\r\n    ROW.push({\r\n      row: i,\r\n      col: j,\r\n      isWall: i === 0 || i === ROW_SIZE - 1 || j === 0 || j === COLUMN_SIZE - 1,\r\n      isStart: false,\r\n      isEnd: false,\r\n      isExplored: false,\r\n      isVisible: false,\r\n      isPath: false,\r\n    });\r\n  }\r\n  board.push(ROW);\r\n}\r\n\r\nboard[4][5].isStart = true;\r\nboard[10][44].isEnd = true;\r\n\r\nexport default board;\r\n","import React from \"react\";\r\n\r\nexport default function Node(el) {\r\n  return (\r\n    <div\r\n      className={\r\n        el.isWall\r\n          ? \"node wall\"\r\n          : el.isStart\r\n          ? \"node start\"\r\n          : el.isEnd\r\n          ? \"node end\"\r\n          : el.isPath\r\n          ? \"node path\"\r\n          : el.isExplored\r\n          ? \"node explored\"\r\n          : el.isVisited\r\n          ? \"node visited\"\r\n          : \"node\"\r\n      }\r\n      onClick={() => el.handleNodeClick([el.row, el.col])}\r\n      onMouseDown={() => el.setBool(true)}\r\n      onMouseEnter={() => el.bool && el.handleNodeClick([el.row, el.col])}\r\n      onMouseUp={() => el.setBool(false)}\r\n    ></div>\r\n  );\r\n}\r\n","const dijkstra = (board, markVisited, markExplored, markPath) => {\r\n  const ROW_SIZE = 15;\r\n  const COLUMN_SIZE = 50;\r\n  const start = [4, 5],\r\n    end = [10, 44];\r\n  const dx = [0, 1, 0, -1],\r\n    dy = [1, 0, -1, 0];\r\n\r\n  let dist = [],\r\n    prev = [];\r\n  for (let i = 0; i < ROW_SIZE; i++) {\r\n    let distRow = [],\r\n      prevRow = [];\r\n    for (let j = 0; j < COLUMN_SIZE; j++) {\r\n      distRow.push(Infinity);\r\n      prevRow.push([i, j]);\r\n    }\r\n    dist.push(distRow);\r\n    prev.push(prevRow);\r\n  }\r\n\r\n  dist[start[0]][start[1]] = 0;\r\n\r\n  let queue = [];\r\n  queue.push(start);\r\n  while (queue.length > 0) {\r\n    let sz = queue.length;\r\n    for (let i = 0; i < sz; i++) {\r\n      let curr = queue.shift();\r\n      setTimeout(() => markVisited(curr), 0);\r\n      if (curr[0] === end[0] && curr[1] === end[1]) {\r\n        curr = prev[curr[0]][curr[1]];\r\n        while (true) {\r\n          let temp = curr;\r\n          setTimeout(() => markPath(temp), 0);\r\n          if (curr === start) {\r\n            break;\r\n          }\r\n          curr = prev[curr[0]][curr[1]];\r\n        }\r\n        return;\r\n      }\r\n      for (let i = 0; i < 4; i++) {\r\n        let next = [curr[0] + dx[i], curr[1] + dy[i]];\r\n        if (\r\n          next[0] >= 0 &&\r\n          next[0] < ROW_SIZE &&\r\n          next[1] >= 0 &&\r\n          next[1] < COLUMN_SIZE &&\r\n          !board[next[0]][next[1]].isWall &&\r\n          !board[next[0]][next[1]].isVisited &&\r\n          dist[next[0]][next[1]] > 1 + dist[curr[0]][curr[1]]\r\n        ) {\r\n          queue.push(next);\r\n          prev[next[0]][next[1]] = curr;\r\n          dist[next[0]][next[1]] = 1 + dist[curr[0]][curr[1]];\r\n          setTimeout(() => markExplored(next), 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  setTimeout(() => markPath(start), 0);\r\n};\r\n\r\nexport default dijkstra;\r\n","function BestFirstSearch(board, markVisited, markExplored, markPath) {\r\n  const ROW_SIZE = 15;\r\n  const COLUMN_SIZE = 50;\r\n  const start = [4, 5],\r\n    end = [10, 44];\r\n  const dx = [0, 1, 0, -1],\r\n    dy = [1, 0, -1, 0];\r\n\r\n  function distance(x1, y1, x2, y2) {\r\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2);\r\n  }\r\n\r\n  let dist = [],\r\n    prev = [];\r\n  for (let i = 0; i < ROW_SIZE; i++) {\r\n    let distRow = [],\r\n      prevRow = [];\r\n    for (let j = 0; j < COLUMN_SIZE; j++) {\r\n      distRow.push(Infinity);\r\n      prevRow.push([i, j]);\r\n    }\r\n    dist.push(distRow);\r\n    prev.push(prevRow);\r\n  }\r\n\r\n  dist[start[0]][start[1]] = 0;\r\n\r\n  let queue = [];\r\n  queue.push(start);\r\n  while (queue.length > 0) {\r\n    let sz = queue.length;\r\n    const [x1, y1] = queue[0];\r\n    let dis = distance(x1, y1, end[0], end[1]);\r\n    let index = 0;\r\n    for (let j = 1; j < sz; j++) {\r\n      let [x1, y1] = queue[j];\r\n      if (dis > distance(x1, y1, end[0], end[1])) {\r\n        dis = distance(x1, y1, end[0], end[1]);\r\n        index = j;\r\n      }\r\n    }\r\n    let temp = queue[0];\r\n    queue[0] = queue[index];\r\n    queue[index] = temp;\r\n    let curr = queue.shift();\r\n    setTimeout(() => markVisited(curr), 0);\r\n    if (curr[0] === end[0] && curr[1] === end[1]) {\r\n      curr = prev[curr[0]][curr[1]];\r\n      while (true) {\r\n        let temp = curr;\r\n        setTimeout(() => markPath(temp), 0);\r\n        if (curr === start) {\r\n          break;\r\n        }\r\n        curr = prev[curr[0]][curr[1]];\r\n      }\r\n      return;\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      let next = [curr[0] + dx[i], curr[1] + dy[i]];\r\n      if (\r\n        next[0] >= 0 &&\r\n        next[0] < ROW_SIZE &&\r\n        next[1] >= 0 &&\r\n        next[1] < COLUMN_SIZE &&\r\n        !board[next[0]][next[1]].isWall &&\r\n        !board[next[0]][next[1]].isVisited &&\r\n        !board[next[0]][next[1]].isExplored &&\r\n        dist[next[0]][next[1]] > 1 + dist[curr[0]][curr[1]]\r\n      ) {\r\n        queue.push(next);\r\n        prev[next[0]][next[1]] = curr;\r\n        dist[next[0]][next[1]] = 1 + dist[curr[0]][curr[1]];\r\n        setTimeout(() => markExplored(next), 0);\r\n      }\r\n    }\r\n  }\r\n  setTimeout(() => markPath(start), 0);\r\n}\r\n\r\nexport default BestFirstSearch;\r\n","function Astar(board, markVisited, markExplored, markPath) {\r\n  const ROW_SIZE = 15;\r\n  const COLUMN_SIZE = 50;\r\n  const start = [4, 5],\r\n    end = [10, 44];\r\n  const dx = [0, 1, 0, -1],\r\n    dy = [1, 0, -1, 0];\r\n\r\n  function distance(x1, y1) {\r\n    return Math.abs(x1 - end[0]) + Math.abs(y1 - end[1]);\r\n  }\r\n\r\n  let dist = [],\r\n    xxdist = [],\r\n    prev = [];\r\n  for (let i = 0; i < ROW_SIZE; i++) {\r\n    let distRow = [],\r\n      prevRow = [],\r\n      xrow = [];\r\n    for (let j = 0; j < COLUMN_SIZE; j++) {\r\n      distRow.push(Infinity);\r\n      xrow.push(Infinity);\r\n      prevRow.push([i, j]);\r\n    }\r\n    dist.push(distRow);\r\n    xxdist.push(xrow);\r\n    prev.push(prevRow);\r\n  }\r\n\r\n  dist[start[0]][start[1]] = distance(start[0], start[1]);\r\n  xxdist[start[0]][start[1]] = 0;\r\n  let queue = [];\r\n  queue.push(start);\r\n  while (queue.length > 0) {\r\n    let sz = queue.length;\r\n    const [x1, y1] = queue[0];\r\n    let dis = dist[x1][y1];\r\n    let index = 0;\r\n    for (let j = 1; j < sz; j++) {\r\n      let [x1, y1] = queue[j];\r\n      if (dis > dist[x1][y1]) {\r\n        dis = dist[x1][y1];\r\n        index = j;\r\n      } else if (dis === dist[x1][y1]) {\r\n        let [x, y] = queue[index];\r\n        if (distance(x, y) > distance(x1, y1)) {\r\n          index = j;\r\n        }\r\n      }\r\n    }\r\n    let temp = queue[0];\r\n    queue[0] = queue[index];\r\n    queue[index] = temp;\r\n    let curr = queue.shift();\r\n    setTimeout(() => markVisited(curr), 0);\r\n    if (curr[0] === end[0] && curr[1] === end[1]) {\r\n      curr = prev[curr[0]][curr[1]];\r\n      let st = [];\r\n      st.push(curr);\r\n      while (true) {\r\n        let temp = curr;\r\n        st.push(temp);\r\n        if (curr === start) {\r\n          for (let j = 0; j < st.length; j++) {\r\n            setTimeout(() => markPath(st[j]), 0);\r\n          }\r\n          return;\r\n        }\r\n        curr = prev[curr[0]][curr[1]];\r\n      }\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      let next = [curr[0] + dx[i], curr[1] + dy[i]];\r\n      if (\r\n        next[0] >= 0 &&\r\n        next[0] < ROW_SIZE &&\r\n        next[1] >= 0 &&\r\n        next[1] < COLUMN_SIZE &&\r\n        !board[next[0]][next[1]].isWall &&\r\n        !board[next[0]][next[1]].isVisited &&\r\n        dist[next[0]][next[1]] > 1 + dist[curr[0]][curr[1]]\r\n      ) {\r\n        queue.push(next);\r\n        prev[next[0]][next[1]] = curr;\r\n        xxdist[next[0]][next[1]] = xxdist[curr[0]][curr[1]] + 1;\r\n        let c = xxdist[next[0]][next[1]];\r\n        dist[next[0]][next[1]] = distance(next[0], next[1]) + c;\r\n        setTimeout(() => markExplored(next), 0);\r\n      }\r\n    }\r\n  }\r\n  setTimeout(() => markPath(start), 0);\r\n}\r\n\r\nexport default Astar;\r\n","import React, { useState } from \"react\";\r\nimport board from \"./Board\";\r\nimport Node from \"./Node\";\r\nimport dijkstra from \"./Dijkstra\";\r\nimport BestFirstSearch from \"./BestFirstSearch\";\r\nimport Astar from \"./Astar\";\r\n\r\nconst ROW_SIZE = 15;\r\nconst COLUMN_SIZE = 50;\r\n\r\nexport default function Grid() {\r\n  const [boardState, setBoardState] = useState(board);\r\n  const [test, setTest] = useState(0);\r\n  const [bool, setBool] = useState(false);\r\n  const [visualizeBool, setVisualizeBool] = useState(true);\r\n  const [resetBool, setResetBool] = useState(true);\r\n\r\n  const handleNodeClick = ([row, col]) => {\r\n    if (board[row][col].isStart || board[row][col].isEnd || !visualizeBool) {\r\n      return;\r\n    }\r\n    if (\r\n      row === 0 ||\r\n      col === 0 ||\r\n      row === ROW_SIZE - 1 ||\r\n      col === COLUMN_SIZE - 1\r\n    ) {\r\n      return;\r\n    }\r\n    board[row][col].isWall ^= true;\r\n    setBoardState(board);\r\n    setTest(Math.random());\r\n  };\r\n\r\n  const markVisited = ([row, col]) => {\r\n    if (board[row][col].isStart || board[row][col].isEnd) {\r\n      return;\r\n    }\r\n    board[row][col].isExplored = false;\r\n    board[row][col].isVisited = true;\r\n    board[row][col].isPath = false;\r\n    setBoardState(board);\r\n    setTest(Math.random());\r\n    setVisualizeBool(false);\r\n    setResetBool(false);\r\n  };\r\n\r\n  const markExplored = ([row, col]) => {\r\n    if (board[row][col].isStart || board[row][col].isEnd) {\r\n      return;\r\n    }\r\n    board[row][col].isExplored = true;\r\n    board[row][col].isVisited = false;\r\n    board[row][col].isPath = false;\r\n    setBoardState(board);\r\n    setTest(Math.random());\r\n    setVisualizeBool(false);\r\n    setResetBool(false);\r\n  };\r\n\r\n  const markPath = ([row, col]) => {\r\n    if (board[row][col].isStart || board[row][col].isEnd) {\r\n      setResetBool(true);\r\n      return;\r\n    }\r\n    board[row][col].isExplored = false;\r\n    board[row][col].isVisited = false;\r\n    board[row][col].isPath = true;\r\n    setBoardState(board);\r\n    setTest(Math.random());\r\n    setVisualizeBool(false);\r\n    setResetBool(false);\r\n  };\r\n\r\n  const resetBoard = () => {\r\n    const ROW_SIZE = 15;\r\n    const COLUMN_SIZE = 50;\r\n\r\n    for (let i = 0; i < ROW_SIZE; i++) {\r\n      for (let j = 0; j < COLUMN_SIZE; j++) {\r\n        board[i][j] = {\r\n          row: i,\r\n          col: j,\r\n          isWall:\r\n            i === 0 || i === ROW_SIZE - 1 || j === 0 || j === COLUMN_SIZE - 1,\r\n          isStart: false,\r\n          isEnd: false,\r\n          isExplored: false,\r\n          isVisited: false,\r\n          isPath: false,\r\n        };\r\n      }\r\n    }\r\n\r\n    board[4][5].isStart = true;\r\n    board[10][44].isEnd = true;\r\n\r\n    setBoardState(board);\r\n    setTest(Math.random());\r\n    setVisualizeBool(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ display: \"none\" }}>{test}</h1>\r\n      {boardState.map((ROW, row) => {\r\n        return (\r\n          <div className=\"row\" key={row}>\r\n            {ROW.map((el, col) => {\r\n              return (\r\n                <Node\r\n                  key={[row, col]}\r\n                  isWall={el.isWall}\r\n                  isVisited={el.isVisited}\r\n                  isExplored={el.isExplored}\r\n                  isStart={el.isStart}\r\n                  isEnd={el.isEnd}\r\n                  isPath={el.isPath}\r\n                  row={row}\r\n                  col={col}\r\n                  handleNodeClick={handleNodeClick}\r\n                  bool={bool}\r\n                  setBool={setBool}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n      <div className=\"buttons\">\r\n        <button\r\n          onClick={() =>\r\n            visualizeBool && Astar(board, markVisited, markExplored, markPath)\r\n          }\r\n          className=\"visualize\"\r\n        >\r\n          Visualize A*\r\n        </button>\r\n        <button\r\n          onClick={() =>\r\n            visualizeBool &&\r\n            dijkstra(board, markVisited, markExplored, markPath)\r\n          }\r\n          className=\"visualize\"\r\n        >\r\n          Visualize Dijkstra\r\n        </button>\r\n        <button\r\n          onClick={() =>\r\n            visualizeBool &&\r\n            BestFirstSearch(board, markVisited, markExplored, markPath)\r\n          }\r\n          className=\"visualize\"\r\n        >\r\n          Visualize Greedy Best First Search\r\n        </button>\r\n        <button\r\n          onClick={() => resetBool && resetBoard(board)}\r\n          className=\"visualize\"\r\n        >\r\n          Reset Board\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"heading\">Pathfinding Algorithms Visualizer</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nvar Year = new Date().getFullYear();\r\n\r\nexport default function Foot() {\r\n  return (\r\n    <footer id=\"Footer\">\r\n      <p>Copyright (c) {Year}</p>\r\n    </footer>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Grid from \"./Grid\";\nimport Header from \"./Header\";\nimport Foot from \"./Foot\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Grid />\n      <Foot />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}